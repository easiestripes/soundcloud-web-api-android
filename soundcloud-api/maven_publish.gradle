

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Jacob Lubecki
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

Properties properties = new Properties()
def bintrayProperties = project.rootProject.file('bintray.properties')
def bintrayUser
def apiKey

def siteUrl = 'https://github.com/birdcage/soundcloud-web-api-android'
def gitUrl = 'https://github.com/birdcage/soundcloud-web-api-android.git'
def issueUrl = 'https://github.com/birdcage/soundcloud-web-api-android/issues'

if (bintrayProperties.exists()) {
    properties.load(bintrayProperties.newDataInputStream())

    bintrayUser = properties.getProperty("BINTRAY_USER")
    apiKey = properties.getProperty("BINTRAY_KEY")
}


// Project Archive Binaries

def fileName = "${BASE_NAME}-${version}.aar"

android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile

        if (outputFile != null && outputFile.name.endsWith('.aar')) {
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile

    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Configure install

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'

            name 'A Java wrapper for the SoundCloud Web API, optimized for use with the Android SDK.'
            url siteUrl

            licenses {
                license {
                    name 'The MIT License'
                    url 'https://opensource.org/licenses/MIT'
                }
            }

            developers {
                developer {
                    id 'jacoblubecki'
                    name 'Jacob Lubecki'
                    email 'jacoblubecki@gmail.com'
                }
            }

            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

// jcenter

bintray {
    user = bintrayUser
    key = apiKey
    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'soundcloud-web-api-android'
        desc = 'A Java wrapper for the SoundCloud Web API, optimized for use with the Android SDK.'

        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = issueUrl

        licenses = ["MIT"]

        publicDownloadNumbers = true

        labels = ['birdcage', 'soundcloud', 'API', 'Android', 'Java']
    }

    pkg.version {
        name = version
        released = new Date()
        vcsTag = "v${VERSION_NUMBER}"
    }
}

// artifactory

artifactory {
    contextUrl = "${ARTIFACTORY_CONTEXT}"

    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = version.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
            username = bintrayUser // The publisher user name
            password = apiKey // The publisher password
            maven = true
        }
        defaults {
            publishArtifacts = true
            publishConfigs('archives')
            publishPom = true //Publish generated POM files to Artifactory (true by default)
            publishIvy = false
            //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }

    resolve {
        repository {
            repoKey = 'jcenter'
            username = bintrayUser // The resolver user name
            password = apiKey // The resolver password
        }
    }
}